#include <stdio.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int allocation[MAX_PROCESSES][MAX_RESOURCES];
int max_resources[MAX_PROCESSES][MAX_RESOURCES];
char processes[MAX_PROCESSES][3] = {"P0", "P1", "P2", "P3", "P4"};

void display_allocation_max() {
    printf("Process Allocation Max\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("%s ", processes[i]);
        for (int j = 0; j < MAX_RESOURCES; j++) {
            printf("%d ", allocation[i][j]);
        }
        printf(" ");
        for (int j = 0; j < MAX_RESOURCES; j++) {
            printf("%d ", max_resources[i][j]);
        }
        printf("\n");
    }
}

void display_need() {
    printf("Need Matrix:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            printf("%d ", max_resources[i][j] - allocation[i][j]);
        }
        printf("\n");
    }
}

void accept_available(int available[]) {
    printf("Enter the available resources: ");
    for (int i = 0; i < MAX_RESOURCES; i++) {
        scanf("%d", &available[i]);
    }
}

void display_available(int available[]) {
    printf("Available Resources:\n");
    for (int i = 0; i < MAX_RESOURCES; i++) {
        printf("%d ", available[i]);
    }
    printf("\n");
}

void accept_allocation() {
    printf("Enter allocation matrix:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("For process %s: ", processes[i]);
        for (int j = 0; j < MAX_RESOURCES; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }
}

void accept_max_resources() {
    printf("Enter maximum resources matrix:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("For process %s: ", processes[i]);
        for (int j = 0; j < MAX_RESOURCES; j++) {
            scanf("%d", &max_resources[i][j]);
        }
    }
}

int main() {
    int available[MAX_RESOURCES];
    
    accept_allocation();
    accept_max_resources();
    display_allocation_max();
    display_need();
    accept_available(available);
    display_available(available);

    // Banker's algorithm logic for checking safe state and finding safe sequence goes here

    return 0;
}
